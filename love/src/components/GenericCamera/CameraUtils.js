/* eslint camelcase: 0 */

const decoder = new TextDecoder('utf-8');

/**
 * Receives an ArrayBuffer (from the FileReader for example) and
 * returns the image information (width,height, isJPEG, length, body)
 * where body is the actual width \times height array
 * @param {ArrayBuffer} arrayBuffer
 */
export const getHeaderInfo = (arrayBuffer) => {
  // find the [START] in the string-decoded array
  // debugger;

  const decodedArray = decoder.decode(arrayBuffer);
  const sections = decodedArray.split('[END]\r\n').filter((s) => s.startsWith('[START]'));
  if (sections.length === 0) {
    throw Error(`
    Server response does not contain an image block. 
    Could not find [END] and [START]. 
    Is the URL right? Got: ${decodedArray}`);
  }
  const exposure = sections[0];
  // const remainder = sections.slice(1).join('');

  const [START, widthString, heightString, isJPEGString, lengthString] = exposure.split('\r\n');
  // const encodedBuffer =  encoder.encode(buffer.join(''));
  // const encodedBuffer =  encoder.encode(buffer);
  // 10 is for the \r\n chars
  const offset = 10 + START.length + widthString.length + heightString.length + lengthString.length + isJPEGString.length;
  const length = parseInt(lengthString, 10);
  const encodedBuffer = new Uint8Array(arrayBuffer.slice(offset, offset + length));
  // 7 is the \r\n[END] size
  const remainder = new Uint8Array(arrayBuffer.slice(offset + length + 7));
  return {
    decodedArray,
    exposure,
    remainder,
    _START: START,
    width: parseInt(widthString, 10),
    height: parseInt(heightString, 10),
    isJPEG: isJPEGString === '1',
    length: length,
    body: encodedBuffer,
  };
};

/**
 * Paints gray pixels with values from array in a canvas.
 * array length must be canvas.width \times canvas.height
 * @param {array like} array
 * @param {HTMLCanvasElement} canvas
 */
export const draw = (array, canvas) => {
  const ctx = canvas.getContext('2d');

  const canvasWidth = canvas.width;
  const canvasHeight = canvas.height;
  ctx.clearRect(0, 0, canvasWidth, canvasHeight);
  ctx.fillStyle = 'white';
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // const data = new Uint8ClampedArray([...array].flatMap(v => [v,v,v, 255]));
  // const imageData = new ImageData(data, 1024, 1024);
  const imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);
  const pixels = imageData.data;

  array.forEach((val, index) => {
    pixels[index * 4] = val;
    pixels[index * 4 + 1] = val;
    pixels[index * 4 + 2] = val;
    pixels[index * 4 + 3] = val;
  });

  ctx.putImageData(imageData, 0, 0);
};

/**
 * Returns a blob containing the chunks where a whole image lives
 * i.e., it has at least one [START]...[END] block when decoded.
 * @param {ReadableStreamDefaultReader} reader
 */
export const readNextBlobFromStream = (reader, remainder) => {
  const stream = new ReadableStream({
    start(controller) {
      // first load the remainder from previous chunk
      let fullDecodedBuffer = decoder.decode(remainder);
      controller.enqueue(remainder);
      function pump() {
        return reader.read().then(({ done, value }) => {
          // Close it if stream closes too
          if (done) {
            controller.close();
            if (!fullDecodedBuffer.includes('[START]') || !fullDecodedBuffer.includes('[END]')) {
              return fullDecodedBuffer;
            }
            return;
          }

          // build up "buffer" string
          const decodedBuffer = decoder.decode(value);
          fullDecodedBuffer += decodedBuffer;

          // check for START
          const startIndex = fullDecodedBuffer.indexOf('[START]\r\n');
          if (startIndex === -1) {
            controller.enqueue(value);
            return pump();
          }

          // check for END
          const endIndex = fullDecodedBuffer.slice(startIndex).indexOf('[END]\r\n');
          if (endIndex === -1) {
            controller.enqueue(value);
            return pump();
          }

          // if both START and END arrived, close

          controller.enqueue(value);
          controller.close();
        });
      }
      return pump();
    },
  });

  return new Response(stream).blob();
};

/**
 * Takes a Blob and attempts to get an image and its metadata
 * @param {Blob} blob
 */
export const readImageDataFromBlob = (blob, imageErrorCallback) => {
  return new Promise((resolve /* , reject */) => {
    const fileReader = new FileReader();
    fileReader.onerror = (...e) => imageErrorCallback(e);
    fileReader.onloadend = (event) => {
      try {
        const arrayBuffer = event.target.result;

        const headerInfo = getHeaderInfo(arrayBuffer);

        resolve(headerInfo);
      } catch (error) {
        imageErrorCallback(error);
      }
    };

    fileReader.readAsArrayBuffer(blob);
  });
};

/**
 * Connects to the Generic Camera server with fetch and attempts
 * to draw images in a canvas from that stream.
 * @param {function} callback
 */
export const fetchImageFromStream = (url, callback, signal, imageErrorCallback) => {
  return fetch(url, { signal }).then(async (r) => {
    if (!r.ok) {
      const message = `(${r.status}) While fetching from ${url}`;
      throw new Error(message);
    }
    const reader = r.body.getReader();

    let remainder = new Uint8Array([]);

    const animate = async () => {
      const blob = await readNextBlobFromStream(reader, remainder);
      const imageDataFromBlob = await readImageDataFromBlob(blob, imageErrorCallback);
      remainder = imageDataFromBlob.remainder;
      callback(imageDataFromBlob);
      requestAnimationFrame(animate);
    };
    animate();
  });
};

export const azel_sample = [
  [45.0, 78.28414760510762],
  [135.0, 78.28414760510762],
  [225.0, 78.28414760510762],
  [315.0, 78.28414760510762],
  [22.5, 66.44353569089877],
  [67.5, 66.44353569089877],
  [112.5, 66.44353569089877],
  [157.5, 66.44353569089877],
  [202.5, 66.44353569089877],
  [247.49999999999997, 66.44353569089877],
  [292.5, 66.44353569089877],
  [337.5, 66.44353569089877],
  [14.999999999999998, 54.340912303861245],
  [45.0, 54.340912303861245],
  [75.0, 54.340912303861245],
  [105.0, 54.340912303861245],
  [135.0, 54.340912303861245],
  [165.0, 54.340912303861245],
  [195.0, 54.340912303861245],
  [224.99999999999997, 54.340912303861245],
  [255.00000000000003, 54.340912303861245],
  [285.0, 54.340912303861245],
  [315.0, 54.340912303861245],
  [344.99999999999994, 54.340912303861245],
  [11.25, 41.81031489577859],
  [33.75, 41.81031489577859],
  [56.25, 41.81031489577859],
  [78.75, 41.81031489577859],
  [101.25, 41.81031489577859],
  [123.74999999999999, 41.81031489577859],
  [146.25, 41.81031489577859],
  [168.75, 41.81031489577859],
  [191.25, 41.81031489577859],
  [213.75, 41.81031489577859],
  [236.25, 41.81031489577859],
  [258.75, 41.81031489577859],
  [281.25, 41.81031489577859],
  [303.75, 41.81031489577859],
  [326.25, 41.81031489577859],
  [348.75, 41.81031489577859],
  [0.0, 29.999999999999993],
  [22.5, 29.999999999999993],
  [45.0, 29.999999999999993],
  [67.5, 29.999999999999993],
  [90.0, 29.999999999999993],
  [112.5, 29.999999999999993],
  [135.0, 29.999999999999993],
  [157.5, 29.999999999999993],
  [180.0, 29.999999999999993],
  [202.5, 29.999999999999993],
  [225.0, 29.999999999999993],
  [247.49999999999997, 29.999999999999993],
  [270.0, 29.999999999999993],
  [292.5, 29.999999999999993],
  [315.0, 29.999999999999993],
  [337.5, 29.999999999999993],
  [11.25, 19.47122063449069],
  [33.75, 19.47122063449069],
  [56.25, 19.47122063449069],
  [78.75, 19.47122063449069],
  [101.25, 19.47122063449069],
  [123.74999999999999, 19.47122063449069],
  [146.25, 19.47122063449069],
  [168.75, 19.47122063449069],
  [191.25, 19.47122063449069],
  [213.75, 19.47122063449069],
  [236.25, 19.47122063449069],
  [258.75, 19.47122063449069],
  [281.25, 19.47122063449069],
  [303.75, 19.47122063449069],
  [326.25, 19.47122063449069],
  [348.75, 19.47122063449069],
  [0.0, 9.594068226860458],
  [22.5, 9.594068226860458],
  [45.0, 9.594068226860458],
  [67.5, 9.594068226860458],
  [90.0, 9.594068226860458],
  [112.5, 9.594068226860458],
  [135.0, 9.594068226860458],
  [157.5, 9.594068226860458],
  [180.0, 9.594068226860458],
  [202.5, 9.594068226860458],
  [225.0, 9.594068226860458],
  [247.49999999999997, 9.594068226860458],
  [270.0, 9.594068226860458],
  [292.5, 9.594068226860458],
  [315.0, 9.594068226860458],
  [337.5, 9.594068226860458],
  [11.25, 0.0],
  [33.75, 0.0],
  [56.25, 0.0],
  [78.75, 0.0],
  [101.25, 0.0],
  [123.74999999999999, 0.0],
  [146.25, 0.0],
  [168.75, 0.0],
  [191.25, 0.0],
  [213.75, 0.0],
  [236.25, 0.0],
  [258.75, 0.0],
  [281.25, 0.0],
  [303.75, 0.0],
  [326.25, 0.0],
  [348.75, 0.0],
  [0.0, -9.594068226860458],
  [22.5, -9.594068226860458],
  [45.0, -9.594068226860458],
  [67.5, -9.594068226860458],
  [90.0, -9.594068226860458],
  [112.5, -9.594068226860458],
  [135.0, -9.594068226860458],
  [157.5, -9.594068226860458],
  [180.0, -9.594068226860458],
  [202.5, -9.594068226860458],
  [225.0, -9.594068226860458],
  [247.49999999999997, -9.594068226860458],
  [270.0, -9.594068226860458],
  [292.5, -9.594068226860458],
  [315.0, -9.594068226860458],
  [337.5, -9.594068226860458],
  [11.25, -19.47122063449069],
  [33.75, -19.47122063449069],
  [56.25, -19.47122063449069],
  [78.75, -19.47122063449069],
  [101.25, -19.47122063449069],
  [123.74999999999999, -19.47122063449069],
  [146.25, -19.47122063449069],
  [168.75, -19.47122063449069],
  [191.25, -19.47122063449069],
  [213.75, -19.47122063449069],
  [236.25, -19.47122063449069],
  [258.75, -19.47122063449069],
  [281.25, -19.47122063449069],
  [303.75, -19.47122063449069],
  [326.25, -19.47122063449069],
  [348.75, -19.47122063449069],
  [0.0, -30.000000000000014],
  [22.5, -30.000000000000014],
  [45.0, -30.000000000000014],
  [67.5, -30.000000000000014],
  [90.0, -30.000000000000014],
  [112.5, -30.000000000000014],
  [135.0, -30.000000000000014],
  [157.5, -30.000000000000014],
  [180.0, -30.000000000000014],
  [202.5, -30.000000000000014],
  [225.0, -30.000000000000014],
  [247.49999999999997, -30.000000000000014],
  [270.0, -30.000000000000014],
  [292.5, -30.000000000000014],
  [315.0, -30.000000000000014],
  [337.5, -30.000000000000014],
  [11.25, -41.81031489577862],
  [33.75, -41.81031489577862],
  [56.25, -41.81031489577862],
  [78.75, -41.81031489577862],
  [101.25, -41.81031489577862],
  [123.74999999999999, -41.81031489577862],
  [146.25, -41.81031489577862],
  [168.75, -41.81031489577862],
  [191.25, -41.81031489577862],
  [213.75, -41.81031489577862],
  [236.25, -41.81031489577862],
  [258.75, -41.81031489577862],
  [281.25, -41.81031489577862],
  [303.75, -41.81031489577862],
  [326.25, -41.81031489577862],
  [348.75, -41.81031489577862],
  [14.999999999999998, -54.340912303861245],
  [45.0, -54.340912303861245],
  [75.0, -54.340912303861245],
  [105.0, -54.340912303861245],
  [135.0, -54.340912303861245],
  [165.0, -54.340912303861245],
  [195.0, -54.340912303861245],
  [224.99999999999997, -54.340912303861245],
  [255.00000000000003, -54.340912303861245],
  [285.0, -54.340912303861245],
  [315.0, -54.340912303861245],
  [344.99999999999994, -54.340912303861245],
  [22.5, -66.44353569089876],
  [67.5, -66.44353569089876],
  [112.5, -66.44353569089876],
  [157.5, -66.44353569089876],
  [202.5, -66.44353569089876],
  [247.49999999999997, -66.44353569089876],
  [292.5, -66.44353569089876],
  [337.5, -66.44353569089876],
  [45.0, -78.28414760510762],
  [135.0, -78.28414760510762],
  [225.0, -78.28414760510762],
  [315.0, -78.28414760510762],
];

export const xy_sample = [
  [285.89596029190164, 214.10403970809838],
  [214.10403970809838, 214.10403970809838],
  [214.10403970809836, 285.89596029190164],
  [285.8959602919016, 285.89596029190164],
  [342.3077205366885, 211.76489024195814],
  [288.23510975804186, 157.69227946331148],
  [211.76489024195814, 157.69227946331148],
  [157.69227946331148, 211.76489024195814],
  [157.69227946331145, 288.2351097580418],
  [211.76489024195808, 342.3077205366885],
  [288.23510975804186, 342.3077205366885],
  [342.3077205366885, 288.23510975804186],
  [390.7743174838463, 212.27963531516093],
  [353.05395279900716, 146.94604720099284],
  [287.72036468483907, 109.22568251615374],
  [212.2796353151609, 109.22568251615374],
  [146.94604720099284, 146.94604720099284],
  [109.22568251615377, 212.27963531516087],
  [109.22568251615371, 287.720364684839],
  [146.94604720099272, 353.05395279900705],
  [212.27963531516093, 390.7743174838463],
  [287.7203646848391, 390.77431748384623],
  [353.05395279900716, 353.0539527990072],
  [390.77431748384623, 287.7203646848392],
  [432.758546526068, 213.64706485163444],
  [404.9352145278239, 146.47559939106424],
  [353.52440060893576, 95.06478547217608],
  [286.3529351483656, 67.24145347393201],
  [213.6470648516345, 67.24145347393198],
  [146.4755993910643, 95.06478547217606],
  [95.06478547217606, 146.47559939106424],
  [67.24145347393201, 213.64706485163447],
  [67.24145347393198, 286.3529351483655],
  [95.06478547217608, 353.52440060893576],
  [146.47559939106412, 404.93521452782386],
  [213.64706485163435, 432.758546526068],
  [286.3529351483656, 432.758546526068],
  [353.5244006089357, 404.935214527824],
  [404.9352145278239, 353.52440060893576],
  [432.758546526068, 286.35293514836565],
  [466.5063509461097, 250.0],
  [450.02578629781635, 167.14660649110203],
  [403.09310892394865, 96.90689107605138],
  [332.85339350889797, 49.97421370218362],
  [250.0, 33.49364905389032],
  [167.14660649110206, 49.97421370218362],
  [96.90689107605138, 96.90689107605135],
  [49.97421370218362, 167.14660649110203],
  [33.49364905389032, 249.99999999999997],
  [49.97421370218356, 332.85339350889785],
  [96.90689107605132, 403.09310892394865],
  [167.14660649110192, 450.02578629781635],
  [249.99999999999997, 466.5063509461097],
  [332.853393508898, 450.02578629781635],
  [403.0931089239486, 403.09310892394865],
  [450.0257862978164, 332.8533935088979],
  [481.17330755369125, 204.0167701195095],
  [445.9792670698931, 119.0508402688163],
  [380.9491597311837, 54.020732930106874],
  [295.9832298804905, 18.826692446308755],
  [204.01677011950957, 18.826692446308726],
  [119.05084026881636, 54.02073293010682],
  [54.020732930106846, 119.0508402688163],
  [18.826692446308755, 204.01677011950952],
  [18.826692446308726, 295.9832298804904],
  [54.020732930106874, 380.9491597311837],
  [119.05084026881613, 445.979267069893],
  [204.0167701195094, 481.1733075536912],
  [295.9832298804905, 481.17330755369125],
  [380.9491597311836, 445.9792670698932],
  [445.9792670698931, 380.9491597311837],
  [481.1733075536912, 295.9832298804906],
  [496.5033242958174, 250.0],
  [477.7393760128979, 155.66726176907179],
  [424.3041721945991, 75.69582780540094],
  [344.3327382309282, 22.26062398710215],
  [250.00000000000003, 3.4966757041826497],
  [155.66726176907179, 22.26062398710215],
  [75.69582780540094, 75.69582780540091],
  [22.26062398710215, 155.66726176907176],
  [3.4966757041826497, 249.99999999999997],
  [22.260623987102093, 344.33273823092804],
  [75.69582780540088, 424.30417219459906],
  [155.66726176907167, 477.73937601289776],
  [249.99999999999994, 496.5033242958174],
  [344.33273823092827, 477.7393760128978],
  [424.304172194599, 424.3041721945991],
  [477.7393760128979, 344.33273823092816],
  [495.1963201008076, 201.22741949596792],
  [457.8674030756363, 111.10744174509946],
  [388.89255825490056, 42.132596924363696],
  [298.7725805040321, 4.803679899192389],
  [201.227419495968, 4.80367989919236],
  [111.10744174509952, 42.13259692436364],
  [42.13259692436367, 111.10744174509946],
  [4.803679899192389, 201.22741949596795],
  [4.80367989919236, 298.77258050403196],
  [42.132596924363696, 388.89255825490056],
  [111.10744174509927, 457.86740307563616],
  [201.22741949596784, 495.1963201008076],
  [298.7725805040321, 495.1963201008076],
  [388.89255825490045, 457.8674030756364],
  [457.8674030756363, 388.89255825490056],
  [495.1963201008076, 298.7725805040322],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
  [-10, -10],
];
