import React, { Component } from 'react';
import PropTypes from 'prop-types';
import DrawerMic from './Details/DrawerMic';
import Table from './Table/Table';
import styles from './Mics.module.css';

export default class Mics extends Component {
  static propTypes = {
    /* Mics's id  */
    mics: PropTypes.arrayOf(PropTypes.objectOf({
      id: PropTypes.number,
      name: PropTypes.string,
      location: PropTypes.string,
      src: PropTypes.string,
    })),
  };

  static defaultProps = {
    mics: [],
  }

  constructor(props) {
    super(props);
    this.state = {
      currentMic: null,
      infoPlot: null,
      alarms: {},
      viewInfo: false,
      isPlaying: false,
      isRecording: false,
      records: [],
    };
  }

  //Functions to microphone. /////

  componentDidMount = () => {
  };

  componentWillUnmount = () => {
    this.closeMicDetails();
  };

  /**
   * Function to select a mic to show in details
   * @param {*} mic to be select
   */
  selectMic = (mic) => {
    if (this.state.currentMic) {
      let { id } = this.state.currentMic;
      this.closeMicDetails();
      if (id === mic.id) return;
    }
    this.setState({ currentMic: mic, viewInfo: true });
    mic.selectMe();
  };

  /**
   * Method to set by the selected mic the necessary info to HeatMap component to plot
   * @param {*} data, info to plot
   */
  setInfoPlot = (data) => {
    this.setState({ infoPlot: data });
  };

  /**
   * Function to change the state viewInfo and open the peleeable component mic details
   */
  openFinishedList = () => {
    this.setState({
      viewInfo: true,
    });
  };

  /**
   * Function to close Mic details and set null the current mic
   */
  closeMicDetails = () => {
    if (this.state.isRecording) this.record();
    if (this.state.isPlaying) this.play();
    this.state.currentMic?.selectMe();
    this.setState({ viewInfo: false, currentMic: null, infoPlot: null });
  };

  /**
   * Function to start or stop to record, using the current mic's recordFunc
   * @returns
   */
  record = () => {
    if (!this.state.currentMic) return;
    const { isRecording } = this.state;
    this.setState({ isRecording: !isRecording });
    this.state.currentMic?.recordFunc();
  };

  /**
   * Function to push a new record on records state
   * @param {*} id of the mic that push
   * @param {*} currentTime time of the record
   * @param {*} url, the blob url generated
   * @param {*} blob, the blob generated by record func
   */
  recordPush = (name, currentTime, url, blob) => {
    const newRecord = (prevRecords) => {
      prevRecords.push({ nameFile: name + '-' + currentTime.toString() + '.wav', url: url, blob: blob });
      return { records: prevRecords };
    };
    this.setState((prevState) => newRecord(prevState.records));
  };

  /**
   * Function to play o pause the current mic sound, using the current mic's recordFunc
   * @returns
   */
  play = () => {
    if (!this.state.currentMic) return;
    const { isPlaying } = this.state;
    this.setState({ isPlaying: !isPlaying });
    this.state.currentMic.playFunc();
  };

  /**
   * Function to set the volume of current mic playing, using the setVolume function of microphone component
   * @param {float} value
   * @returns
   */
  setVolume = (value) => {
    if (!this.state.currentMic) return;
    this.state.currentMic.volumeFunc(value);
  };

  render() {
    const { mics } = this.props;
    const drawerDetail = this.state.viewInfo ? styles.micDetails : styles.collapsedMicDetail;
    let { volume } = this.state.currentMic ?? {};

    return (
      <div>
        <div className={styles.component}>
          {/* Mic Table */}
          <div className={styles.tableMics}>
            <Table
              mics={mics}
              selectMic={this.selectMic}
              recordPush={this.recordPush}
              setInfoPlot={this.setInfoPlot}
            />
          </div>
          <DrawerMic
            drawerDetailCss={drawerDetail}
            id={`${this.state.currentMic?.id}`}
            name={this.state.currentMic?.name}
            infoPlot={this.state.infoPlot}
            play={this.play}
            setVolume={this.setVolume}
            volume={volume}
            isPlaying={this.state.isPlaying}
            isRecording={this.state.isRecording}
            record={this.record}
            records={this.state.records}
          />

        </div>
      </div>
    );
  }
}