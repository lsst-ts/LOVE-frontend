/** 
This file is part of LOVE-frontend.

Copyright (c) 2023 Inria Chile.

Developed for Inria Chile Tech Team.

This program is free software: you can redistribute it and/or modify it under 
the terms of the GNU General Public License as published by the Free Software 
Foundation, either version 3 of the License, or at your option) any later version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR 
 A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with 
this program. If not, see <http://www.gnu.org/licenses/>.
*/

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import PlayIcon from 'components/icons/MicsIcon/Play/PlayIcon';
import DownloadIcon from 'components/icons/MicsIcon/Download/DownloadIcon';
import PauseIcon from 'components/icons/MicsIcon/Pause/PauseIcon';
import StopIcon from 'components/icons/MicsIcon/Stop/StopIcon';
import styles from './Record.module.css';

export default class Record extends Component {
  static propTypes = {
    /**
     * The url blob generated by the record
     */
    url: PropTypes.string,
    /**
     * The name file set to the record
     */
    nameFile: PropTypes.string,
  };

  constructor(props) {
    super(props);
    this.state = {
      play: false,
    };
    this.aCtx;
    this.source;
    this.songSource;
    this.masterGain;
  }

  componentDidMount = () => {
    this.aCtx = new AudioContext();
    this.source = new Audio(this.props.url);
    this.songSource = this.aCtx.createMediaElementSource(this.source);
    this.masterGain = this.aCtx.createGain();
    this.masterGain.gain.value = 0.6;
    this.songSource.connect(this.masterGain);
    this.masterGain.connect(this.aCtx.destination);
  };

  componentWillUnmount = () => {
    if (this.state.play) this.play();
  };

  /**
   * Function to play the record
   */
  play = () => {
    let { aCtx, source } = this;
    if (this.state.play) {
      source.pause();
      source.currentTime = 0;
      aCtx.suspend();
      this.setState({ play: false });
    } else {
      aCtx.resume().then(() => {
        source.play();
        source.addEventListener('ended', () => {
          this.setState({ play: false });
        });
        this.setState({ play: true });
      });
    }
  };

  render() {
    const { url, nameFile, blob } = this.props;
    const svgPLay = this.state.play ? (
      <StopIcon className={styles.playSVG} />
    ) : (
      <PlayIcon className={[styles.playSVG, styles.opacity].join(' ')} />
    );

    return (
      <div className={styles.records}>
        <span onClick={() => this.play()} className={[styles.spanButton, styles.marginBlock].join(' ')}>
          {svgPLay}
        </span>
        <span className={styles.spanNameFiles}>{nameFile}</span>
        <a onClick={() => this.auxFunc(blob)} href={url} download={nameFile} className={styles.download}>
          <DownloadIcon className={styles.downloadSvg} />
        </a>
      </div>
    );
  }
}
